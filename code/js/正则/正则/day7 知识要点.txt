正则知识点
RegExp 是正则表达式的缩写
创建正则表达式的方法

正则表达式(regular expression) 目的 验证 匹配 替换

正则表达式直接量  new Regex
一、元字符
.   匹配除换行符之外的任意字符
\w  匹配字母数字下划线，等同于：[a-zA-Z0-9_]
\d  匹配数字，等同于[0-9]
|   或匹配，如 /x|y/ 正则可匹配x或y两个字符
^   匹配字符串的开始
$   匹配字符串的结束

二、反义字符
[a-z] [A-Z] [0-9] 26个大小写字母加_
[xyz]   匹配xyz中的一个
[^x]    匹配除“x”之外的所有字符，其中“x”可以为任意字符
[^xyz]  同上，匹配除“x、y、z”之外的任意字符

三、转义字符
略

四、重复匹配
*   重复出现零次或多次 (可能有,可能没有)
+	重复出现一次或多次 (一定有)
？	重复出现零次或一次 (有没有)
{n}	重复出现n次
{n,}    至少重复出现n次
{m,n}	重复重现m到n次，其中，m<n {2,5}

五、分组/捕获
略

六、贪婪与惰性
*?      重复任意次，但尽可能少的重复
+?	重复一次或多次，但尽可能少的重复
{m,n}?	重复m到n次，但尽可能少的重复
{n,}?	重复n次以上，但尽可能少的重复
{n}?    重复n次，但尽可能少的重复

七、修饰符
i   ignoreCase的缩写，表示忽略字母的大小写
g	global的缩写，进行全局匹配，即对字符串进行全文匹配，直到字符串遍历结束

八、子模式匹配
var reg = /^(\d{4})-(\d{2})-(\d{2})/
var str = '2016-12-12';
var date = str.replace(reg,'$1年$2月$3日');

九、字符串方法
match	找到一个或多个正则表达式的匹配。
// match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配
// 正则条件.test(要测的值)

replace	替换与正则表达式匹配的子串。
split 把字符串分割为字符串数组。

正则匹配检查 test    // 正则条件.test(要测的值)

正则表达式优先级
http://www.runoob.com/regexp/regexp-operator.html

/^158|159$/
/^(158|159)$/

邮箱匹配
/^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/
1)^[a-z0-9]+ 以小写字母或数字开头(1个或多个)
2)[._\\-]*  ._\-中的一个(0个或多个)
3)[a-z0-9]
4)([._\\-]*[a-z0-9])*   2)和3)合起来0个或多个
5)@
6)([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}
a,[a-z0-9]+ 略
b,[-a-z0-9]*   -或a到z 0到9中的一个(0个或多个)
c,[a-z0-9]+ 略
d,.
7)[a-z0-9]+ 以a-z或0到9中的一个结尾









Date对象
getFullYear()
getMonth()
getDate()
getDay()
getTime() = +new Date();
时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数

setFullYear(当前年-1) //设置时间往前一年
setMonth(当前月-1) //设置时间往前一月
setDate(当前天-1) //设置时间往前一天
setTime()  //设置时间戳


Array对象
构造两个方法：
1.var a = new Array(xx) //xx为数组长度，可写可不写
2.var a = [];  //空数组 也可以var a = [1,2];

//a.length 数组长度
//a[下标]   下标范围：0到length-1

测试  如果下标越界 会报错吗。


concat 组合新数组

join 查手册

pop 查手册

push 查手册

reverse 查手册

shift 查手册

unshift 查手册

slice 查手册

sort 查手册


